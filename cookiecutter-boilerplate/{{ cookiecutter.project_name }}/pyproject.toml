[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "{{ cookiecutter.project_slug }}"
description = "{{ cookiecutter.project_short_description }}"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.12",
]
keywords = ["{{ cookiecutter.project_slug }}"]
dynamic = ["version"]
license = { file = "LICENSE" }
requires-python = ">=3.9"
dependencies = [{% for pkg, version in cookiecutter._prod_requirements.items() %}
    "{{ pkg }}{{ version }}",
{%- endfor %}
]
authors = [
    { name = "{{ cookiecutter.author }}",  email = "{{ cookiecutter.email }}" },
]

[project.readme]
file = "README.md"
content-type = "text/markdown"

[project.urls]
Homepage = "https://github.com/{{ cookiecutter.github_user }}/{{ cookiecutter.project_name }}"
Documentation = "https://{{ cookiecutter.github_user }}.github.io/{{ cookiecutter.project_slug }}"
Repository = "https://github.com/{{ cookiecutter.github_user }}/{{ cookiecutter.project_name }}"
Changelog = "https://github.com/{{ cookiecutter.github_user }}/{{ cookiecutter.project_name }}/CHANGELOG.md"

[project.optional-dependencies]
dev = [{% for pkg, version in cookiecutter._dev_requirements.items() %}
    "{{ pkg }}{{ version }}",
{%- endfor %}
]
test = [{% for pkg, version in cookiecutter._test_requirements.items() %}
    "{{ pkg }}{{ version }}",
{%- endfor %}
]
docs = [{% for pkg, version in cookiecutter._docs_requirements.items() %}
    "{{ pkg }}{{ version }}",
{%- endfor %}
]

#[project.scripts]
#{{ cookiecutter.project_name }} = {{ cookiecutter.project_slug }}.cli:cli

[tool.hatch.version]
path = "{{ cookiecutter.project_slug }}/__init__.py"

[tool.coverage.run]
branch = true
omit = ["**/test_*.py", "**/__main__.py"]

[tool.coverage.report]
omit = [
    "*site-packages*",
    "*tests*",
    "*.tox*",
]
show_missing = true
exclude_lines = [
    "raise NotImplementedError",
    "pragma: no-coverage",
]

[tool.coverage.html]
directory = "test-reports/htmlcov"

[tool.pytest.ini_options]
addopts = [
    "--cov={{ cookiecutter.project_slug }}",
    "--cov-branch",
    "--cov-report=term",
    "--cov-report=html",
]
norecursedirs = [
    ".*",
    "build",
    "dist",
    "{arch}",
    "*.egg",
    "venv",
    "requirements*",
    "lib",
]
python_files = "test*.py"

[tool.interrogate]
ignore-init-method = true
ignore-init-module = false
ignore-magic = true
ignore-semiprivate = false
ignore-private = false
ignore-property-decorators = false
ignore-module = false
ignore-nested-functions = true
ignore-nested-classes = true
ignore-setters = false
fail-under = 90
exclude = ["setup.py", "docs", "build"]
ignore-regex = ["^get$", "^mock_.*", ".*BaseClass.*"]
verbose = 0
quiet = false
whitelist-regex = []
color = true

[tool.black]
line-length = 119

[tool.ruff]
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 119

[tool.ruff.lint]
select = ["E", "W", "F", "I", "N", "B", "BLE", "C", "D", "E", "F", "I", "N", "S", "T", "W", "RUF", "NPY", "PD", "PGH", "ANN", "C90", "PLC", "PLE", "PLW", "TCH"]
ignore = [
    "ANN002", "ANN003", "ANN101", "ANN102", "ANN204", "ANN401",
    "S101", "S104",
    "D105", "D106", "D107", "D200", "D212",
    "PD011",
    "PLW1510",
]
external = [
    "DOC", # pydoclint
]
fixable = ["E", "W", "F", "I", "N", "B", "BLE", "C", "D", "E", "F", "I", "N", "S", "T", "W", "RUF", "NPY", "PD", "PGH", "ANN", "C90", "PL", "PLC", "PLE", "PLW", "TCH"]
unfixable = []

# Exclude a variety of commonly ignored directories.

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

typing-modules = ["typing", "types", "typing_extensions", "mypy", "mypy_extensions"]

[tool.ruff.lint.per-file-ignores]
"tests/*" = ["S101", "PLR0913", "PLR0915", "PGH003", "ANN001", "ANN202", "ANN201", "PLR0912", "TRY301", "PLW0603", "PLR2004", "ANN101", "S106", "TRY201", "ANN003", "ANN002", "S105", "TRY003"]

[tool.ruff.lint.mccabe]
# Unlike Flake8, default to a complexity level of 10.
max-complexity = 10

[tool.ruff.lint.isort]
order-by-type = true

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.pydocstyle]
convention = "google"
add-ignore = ["D107", "D200", "D212"]
match = "(?!test_).*\\.py"

[tool.pydoclint]
style = "google"
exclude = '\.git|tests'
require-return-section-when-returning-nothing = false
arg-type-hints-in-docstring = false
check-return-types = false
quiet = true


[tool.bumpversion]
current_version = "{{ cookiecutter.version }}"
commit = true
commit_args = "--no-verify"
tag = true
tag_name = "{new_version}"
allow_dirty = true
parse = "(?P<major>\\d+)\\.(?P<minor>\\d+)\\.(?P<patch>\\d+)(\\.(?P<dev>post)\\d+\\.dev\\d+)?"
serialize = [
    "{major}.{minor}.{patch}.{dev}{$PR_NUMBER}.dev{distance_to_latest_tag}",
    "{major}.{minor}.{patch}"
]
message = "Version updated from {current_version} to {new_version}"

[tool.bumpversion.parts.dev]
values = ["release", "post"]

[[tool.bumpversion.files]]
filename = "{{ cookiecutter.project_slug }}/__init__.py"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "Unreleased"

[[tool.bumpversion.files]]
filename = "CHANGELOG.md"
search = "{current_version}...HEAD"
replace = "{current_version}...{new_version}"

[[tool.bumpversion.files]]
regex = true
filename = "pyproject.toml"
search = "^version = \"{current_version}\""
replace = "version = \"{new_version}\""
